//
// This file is part of the GNU ARM Eclipse distribution.
// Copyright (c) 2014 Liviu Ionescu.
//

// ----------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include "diag/Trace.h"
#include "fatfs.h"
#include "usb_host.h"
#include "stm32f4xx_hal.h"
#include "Timer.h"
#include "BlinkLed.h"
#include "PlayMP3.h"
#include "cortexm/ExceptionHandlers.h"
#include "generic.h"
#include "timeKeeping.h"
#include "DebugPort.h"
#include "AudioChip.h"

//
// Disable specific warnings
//

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"



// ----------------------------------------------------------------------------
//
// Standalone STM32F4 Simple Alarm Clock Stub Code
//
// This code just plays an MP3 file off of a connected USB flash drive.
//
// Trace support is enabled by adding the TRACE macro definition.
// By default the trace messages are forwarded to the DEBUG output,
// but can be rerouted to any device or completely suppressed, by
// changing the definitions required in system/src/diag/trace_impl.c
// (currently OS_USE_TRACE_ITM, OS_USE_TRACE_SEMIHOSTING_DEBUG/_STDOUT).
//

void
Display7Segment( void ),
DisplayClockMode( void ),
ConvertTo24Hour( void ),
SetTime( void ),
SetAlarm( void ),
Snooze( void ),
ProcessButtons( void ),
GetCurrentTime( void ),
SystemClock_Config( void ),
MX_GPIO_Init( void ),
MX_I2C1_Init( void ),
MX_USB_HOST_Process( void );

uint16_t
CheckButtons( void );


// STMCube Example declarations.
// static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);

static void
MSC_Application(void);

//static void
//Error_Handler(void);

//
// Global variables
//

RTC_InitTypeDef
ClockInit;				// Structure used to initialize the real time clock

RTC_TimeTypeDef
ClockTime;				// Structure to hold/store the current time

RTC_TimeTypeDef
MasterAlarmTime;

RTC_DateTypeDef
ClockDate;				// Structure to hold the current date

RTC_AlarmTypeDef
ClockAlarm;				// Structure to hold/store the current alarm time

TIM_HandleTypeDef
Timer6_44Khz,			// Structure for the audio play back timer subsystem
Timer_5;				// Structure for the LED display timer subsystem

DAC_HandleTypeDef
AudioDac;				// Structure for the audio digital to analog converter subsystem

DMA_HandleTypeDef
AudioDma;				// Structure for the audio DMA direct memory access controller subsystem

RTC_HandleTypeDef
RealTimeClock;			// Structure for the real time clock subsystem

I2C_HandleTypeDef		// Structure for I2C subsystem. Used for external audio chip
I2c;

volatile int
DisplayClockModeCount,		// Number of display ticks to show the current clock mode time format
PlayMusic = FALSE,			// Flag indicating if music should be played
DebounceCount = 0,			// Buttons debounce count
Counter = 0,

alarmSet = 1,

state = 0,

// debouncing var

button_on_likelihood[5] = {0,0,0,0,0},	// measure of how likely the button is pressed
button_off_likelihood[5] = {0,0,0,0,0};	// measure of how likely the button is unpressed


volatile uint16_t
ButtonsPushed,					// Bit field containing the bits of which buttons have been pushed
button_pressed = 0x0,			// button state: 1 = pressed, 0 = unpressed
was_pressed = 0x0;


FATFS
UsbDiskFatFs;			// File system object for USB disk logical drive

char
UsbDiskPath[4];			// USB Host logical drive path

int
BcdTime[4],				// Array to hold the hours and minutes in BCD format
DisplayedDigit = 0,		// Current digit being displayed on the LED display

digit_active = 0,



// Current format for the displayed time ( IE 12 or 24 hour format )
ClockHourFormat = CLOCK_HOUR_FORMAT_24,
AlarmPmFlag = 0,
TimePmFlag = 0;






//
// Functions required for long files names on fat32 partitions
//

WCHAR ff_convert (WCHAR wch, UINT dir)
{
	if (wch < 0x80)
	{
		//
		// ASCII Char
		//
		return wch;
	}

	//
	// unicode not supported
	//
	return 0;
}

WCHAR ff_wtoupper (WCHAR wch)
{
	if (wch < 0x80)
	{
		//
		// ASCII Char
		//
		if (wch >= 'a' && wch <= 'z')
		{
			wch &= ~0x20;
		}

		return wch;
	}

	//
	// unicode not supported
	//
	return 0;
}


//
// Dummy interrupt handler function
//
void TIM6_DAC_IRQHandler(void)
{
	HAL_NVIC_DisableIRQ( TIM6_DAC_IRQn );
}



/*
 * Function: ConfigureAudioDma
 *
 * Description:
 *
 * Initialize DMA, DAC and timer 6 controllers for a mono channel audio to be played on PA4
 *
 */

void ConfigureAudioDma( void )
{

	TIM_MasterConfigTypeDef
	Timer6MasterConfigSync;

	GPIO_InitTypeDef
	GPIO_InitStructure;

	DAC_ChannelConfTypeDef
	DacConfig;

	//
	// If we have the timer 6 interrupt enabled then disable the timer from running when we halt the processor or hit a breakpoint.
	// This also applies to printing using the semihosting method which also uses breakpoints to transfer data to the host computer
	//


	__HAL_DBGMCU_UNFREEZE_TIM5();

	//
	// Enable the clocks for GPIOA, GPIOC and Timer 6
	//
	__HAL_RCC_TIM6_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();

	//
	// Configure PA4 as an analog output ( used for D/A output of the analog signal )
	//

	GPIO_InitStructure.Pin = GPIO_PIN_4;
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
	GPIO_InitStructure.Alternate = 0;
	HAL_GPIO_Init( GPIOA, &GPIO_InitStructure);

	//
	// Configure timer 6 for a clock frequency of 44Khz and a triggered output for the DAC
	//
	Timer6_44Khz.Instance = TIM6;
	Timer6_44Khz.Init.Prescaler = 20; //this value may have to be changed
	Timer6_44Khz.Init.CounterMode = TIM_COUNTERMODE_UP;
	Timer6_44Khz.Init.Period = 90; // this value may have to be changed
	Timer6_44Khz.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	HAL_TIM_Base_Init( &Timer6_44Khz );

	Timer6MasterConfigSync.MasterOutputTrigger = TIM_TRGO_UPDATE;
	Timer6MasterConfigSync.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization( &Timer6_44Khz, &Timer6MasterConfigSync );

	//
	// Set the priority of the interrupt and enable it
	//
	NVIC_SetPriority(TIM6_DAC_IRQn, 0);
	NVIC_EnableIRQ(TIM6_DAC_IRQn);

	//
	// Clear any pending interrupts
	//
	__HAL_TIM_CLEAR_FLAG( &Timer6_44Khz, TIM_SR_UIF );

	//
	// Enable the timer interrupt and the DAC Trigger
	//

	__HAL_TIM_ENABLE_DMA( &Timer6_44Khz, TIM_DIER_UDE );

	//
	// Enable the clocks for the DAC
	//
	__HAL_RCC_DAC_CLK_ENABLE();

	AudioDac.Instance = DAC;
	if ( HAL_OK != HAL_DAC_Init( &AudioDac ))
	{
		trace_printf("DAC initialization failure\n");
		return;
	}

	//
	// Enable the trigger from the DMA controller and the output buffer of the DAC
	//
	DacConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
	DacConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;

	if ( HAL_DAC_ConfigChannel(&AudioDac, &DacConfig, DAC_CHANNEL_1) != HAL_OK )
	{
		trace_printf("DAC configuration failure\n");
		return;
	}

	//
	// Enable the clock for the DMA controller
	//
	__HAL_RCC_DMA1_CLK_ENABLE();

	//
	// Initialize the stream and channel number and the memory transfer settings
	//

	AudioDma.Instance = DMA1_Stream5;
	AudioDma.Init.Channel = DMA_CHANNEL_7;
	AudioDma.Init.Direction = DMA_MEMORY_TO_PERIPH;
	AudioDma.Init.PeriphInc = DMA_PINC_DISABLE;
	AudioDma.Init.MemInc = DMA_MINC_ENABLE;
	AudioDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	AudioDma.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	AudioDma.Init.Mode = DMA_NORMAL;
	AudioDma.Init.Priority = DMA_PRIORITY_MEDIUM;
	AudioDma.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	HAL_DMA_Init( &AudioDma );

	//
	// Link the DMA channel the to the DAC controller
	//
	__HAL_LINKDMA( &AudioDac, DMA_Handle1, AudioDma );

	//
	// Enable the interrupt for the specific stream
	//
	HAL_NVIC_SetPriority( DMA1_Stream5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ( DMA1_Stream5_IRQn );

	//
	// Start the timer
	//
	__HAL_TIM_ENABLE( &Timer6_44Khz );

	return;
}

void RealTimeClockInit( void )
{
	RCC_OscInitTypeDef
	RCC_OscInitStruct;

	RCC_PeriphCLKInitTypeDef
	PeriphClkInitStruct;

	//
	// Configure LSI as RTC clock source
	//
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;

	if( HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK )
	{
		trace_printf( "HAL_RCC_OscConfig failed\r\n");
		while( TRUE );
	}

	//
	// Assign the LSI clock to the RTC
	//
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
	{
		trace_printf( "HAL_RCCEx_PeriphCLKConfig failed\r\n");
		while( TRUE );
	}

	//
	// Enable the RTC
	//
	__HAL_RCC_RTC_ENABLE();

	//
	// Configure the RTC format and clock divisor
	//

	RealTimeClock.Instance = RTC;
	RealTimeClock.Init.HourFormat = RTC_HOURFORMAT_24;

	RealTimeClock.Init.AsynchPrediv = 127;
	RealTimeClock.Init.SynchPrediv = 0xFF;
	RealTimeClock.Init.OutPut = RTC_OUTPUT_DISABLE;
	RealTimeClock.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
	RealTimeClock.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
	HAL_RTC_Init( &RealTimeClock );

	//
	// Disable the write protection for RTC registers
	//
	__HAL_RTC_WRITEPROTECTION_DISABLE( &RealTimeClock );

	//
	// Disable the Alarm A interrupt
	//
	__HAL_RTC_ALARMA_DISABLE( &RealTimeClock );

	//
	// Clear flag alarm A
	//
	__HAL_RTC_ALARM_CLEAR_FLAG(&RealTimeClock, RTC_FLAG_ALRAF);
}


void ConfigureDisplay( void )
{
	GPIO_InitTypeDef GPIO_InitStructure;

	//
	//  Enable clocks for PWR_CLK for RTC, GPIOE, GPIOD, GPIOC and TIM5.
	//
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();	// for Alarm LED
	__HAL_RCC_GPIOB_CLK_ENABLE();	// for AM/PM LED
	__HAL_RCC_TIM5_CLK_ENABLE();
	__HAL_RCC_PWR_CLK_ENABLE();

	//
	// Configure the input pins 4, 5, 8, 9 and 11 of port C for reading the push buttons.
	// Use internal pull ups to reduce component count
	//
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pin = GPIO_PIN_4;			// TIME_BUTTON
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_5;			// ON_OFF_BUTTON
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_8;			// MODE_BUTTON
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_9;			// ALARM_BUTTON
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_11;			// SNOOZE_BUTTON
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
	//
	//	Configure GPIO for selecting each segment on a digit.
	//	Use free I/O pins of port E (pin 6 onwards).
	//
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pin = GPIO_PIN_9;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_10;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_11;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_12;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_13;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_14;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	//
	//	Configure GPIO for selecting each digit on the LED display.
	//	Use pin 7 to 11 of port D.
	//
	GPIO_InitStructure.Pin = GPIO_PIN_2;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_6;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_7;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
	//
	// Enable the two indicator LEDs
	//
	GPIO_InitStructure.Pin = GPIO_PIN_11;			// AM/PM LED
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_InitStructure.Pin = GPIO_PIN_3;			// Alarm LED
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
	//
	// Enable the real time clock alarm A interrupt
	//
	/////HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );

	//
	// Enable the LED multiplexing display and push button timer (TIM5) at a frequency of 500Hz
	//
	Timer_5.Instance = TIM5;
	Timer_5.Init.Prescaler = 83;
	Timer_5.Init.CounterMode = TIM_COUNTERMODE_UP;
	Timer_5.Init.Period = 1999;
	Timer_5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	//Timer_5.Init.RepetitionCounter = 0;
	HAL_TIM_Base_Init( &Timer_5 );
	//
	// Enable the timer interrupt
	//
	HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(TIM5_IRQn);

	__HAL_TIM_ENABLE_IT( &Timer_5, TIM_IT_UPDATE );
	__HAL_TIM_ENABLE( &Timer_5 );


}


int main(int argc, char* argv[])
{
	//
	// Reset of all peripherals, Initializes the Flash interface and the System timer.
	//
	HAL_Init();
	//
	// Configure the system clock
	//
	SystemClock_Config();
	//
	// Initialize all configured peripherals
	//
	MX_GPIO_Init();
	//
	// Enable the serial debug port. This allows for text messages to be sent via the STlink virtual communications port to the host computer.
	//
	DebugPortInit();
	//
	// Display project name with version number
	//
	trace_puts(
			"*\n"
			"*\n"
			"* Alarm clock project for stm32f4discovery board V2.00\n"
			"*\n"
			"*\n"
	);
	//
	// Initialize the I2C port for the external CODEC
	//
	MX_I2C1_Init();
	//
	// Configure the CODEC for analog pass through mode.
	// This allows for audio to be played out of the stereo jack
	//
	InitAudioChip();
	//
	// Initialize the flash file and the USB host adapter subsystem
	//
	MX_FATFS_Init();
	MX_USB_HOST_Init();
	//
	// Initialize the DMA and DAC systems. This allows for audio to be played out of GPIOA pin 4
	//
	ConfigureAudioDma();
	//
	// Initialize the seven segment display pins
	//
	ConfigureDisplay();

	//
	// Initialize the RTC
	//
	RealTimeClockInit();
	//
	// Structure to set the time in the RTC
	//
	ClockTime.Hours 		 = 06;
	ClockTime.Minutes 		 = 29;
	ClockTime.Seconds 		 = 00;
	ClockTime.SubSeconds 	 = 0;
	ClockTime.TimeFormat 	 = RTC_HOURFORMAT_24;
	ClockTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	ClockTime.StoreOperation = RTC_STOREOPERATION_RESET;
	//
	// Structure to set the date in the RTC
	//
	ClockDate.Date 	  =	21;
	ClockDate.Month   =	RTC_MONTH_JUNE;
	ClockDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
	ClockDate.Year 	  =	17;
	//
	// Set the date and time in the RTC
	//
	HAL_RTC_SetDate(&RealTimeClock, &ClockDate, RTC_FORMAT_BIN);
	HAL_RTC_SetTime(&RealTimeClock, &ClockTime, RTC_FORMAT_BIN);
	//
	// Structure to set the alarm in the RTC
	//
	ClockAlarm.AlarmTime.Hours 			= 06;
	ClockAlarm.AlarmTime.Minutes 		= 30;
	ClockAlarm.AlarmTime.Seconds 		= 00;
	ClockAlarm.AlarmTime.SubSeconds 	= 0;
	ClockAlarm.AlarmTime.TimeFormat 	= RTC_HOURFORMAT_24;
	ClockAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	ClockAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	ClockAlarm.Alarm					= RTC_ALARM_A;

	ClockAlarm.AlarmDateWeekDay 		= RTC_WEEKDAY_WEDNESDAY;
	ClockAlarm.AlarmDateWeekDaySel 		= RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
	ClockAlarm.AlarmMask 				= RTC_ALARMMASK_DATEWEEKDAY;
	ClockAlarm.AlarmSubSecondMask		= RTC_ALARMSUBSECONDMASK_ALL;

	MasterAlarmTime = ClockAlarm.AlarmTime;

	//
	// Set the time of the alarm in the RTC
	//
	HAL_RTC_SetAlarm(&RealTimeClock, &ClockAlarm, RTC_FORMAT_BIN);
	HAL_RTC_SetAlarm_IT(&RealTimeClock, &ClockAlarm, RTC_FORMAT_BIN);
	__HAL_RTC_ALARM_ENABLE_IT(&RealTimeClock, RTC_IT_ALRA);
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);

	//
	// Send a greeting to the trace device (skipped on Release).
	//
	trace_puts("Initialization Complete");
	//
	// At this stage the system clock should have already been configured at high speed.
	//
	trace_printf("System clock: %u Hz\n", SystemCoreClock);
	//
	// Start the system timer
	//
	timer_start();
	blink_led_init();
	//
	// Wait until the drive is mounted before we can play some music
	//
	do {
		MX_USB_HOST_Process();
	} while ( Appli_state != APPLICATION_READY );

	trace_printf( "\n" );
	//
	// Remove comment slashes from line line below for music to play at start
	//
	PlayMusic = FALSE;

	while ( TRUE )
	{
		//
		//	checks for the alarm interrupt and call the music playing module
		//
		if ( TRUE == PlayMusic )
		{
			MSC_Application(); // alarm music/tones
		}
		//
		// Wait for an interrupt to occur
		//
		__asm__ volatile ( "wfi" );
	}
}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* I2C1 init function */
void MX_I2C1_Init(void)
{

	I2c.Instance = I2C1;
	I2c.Init.ClockSpeed = 100000;
	I2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
	I2c.Init.OwnAddress1 = 0;
	I2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	I2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	I2c.Init.OwnAddress2 = 0;
	I2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	I2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
	HAL_I2C_Init( &I2c );

}

void MX_GPIO_Init(void)
{

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOD_CLK_ENABLE();



	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
	HAL_GPIO_Init( GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);


	/*Configure GPIO pins : PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
			|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

}

/**
 * @brief  Main routine for Mass Storage Class
 * @param  None
 * @retval None
 */
static void MSC_Application(void)
{
	FRESULT
	Result;                                          /* FatFs function common result code */

	//
	// Mount the flash drive using a fat file format
	//

	Result = f_mount( &UsbDiskFatFs, (TCHAR const*)USBH_Path, 0);
	if( FR_OK == Result )
	{

		//
		// File system successfully mounted, play all the music files in the directory.
		//
		while ( TRUE == PlayMusic )
		{
			PlayDirectory( "", 0 );
		}
	}
	else
	{
		//
		// FatFs Initialization Error
		//
		//	Error_Handler();
	}

	//
	// Unlink the USB disk I/O driver
	//
	FATFS_UnLinkDriver( UsbDiskPath );
}



/*
 * Function: TIM5_IRQHandler
 *
 * Description:
 *
 * Timer interrupt handler that is called at a rate of 500Hz. This function polls the time and
 * displays it on the 7 segment display. It also checks for button presses and handles any bounce conditions.
 *
 */

void TIM5_IRQHandler(void)
{
	if( __HAL_TIM_GET_FLAG( &Timer_5, TIM_IT_UPDATE) != RESET  )
	{
		__HAL_TIM_CLEAR_FLAG( &Timer_5, TIM_IT_UPDATE );
	}
	// reset flag for IRQ
	CheckButtons();
	ProcessButtons();
	GetCurrentTime();
	Display7Segment();
	DisplayClockMode();

}


/*
 * Function: RTC_Alarm_IRQHandler
 *
 * Description:
 *
 * When alarm occurs, clear all the interrupt bits and flags then start playing music.
 *
 */

void RTC_Alarm_IRQHandler(void)
{

	//
	// Verify that this is a real time clock interrupt
	//
	if( __HAL_RTC_ALARM_GET_IT( &RealTimeClock, RTC_IT_ALRA ) != RESET )
	{

		//
		// Clear the alarm flag and the external interrupt flag
		//
		__HAL_RTC_ALARM_CLEAR_FLAG( &RealTimeClock, RTC_FLAG_ALRAF );
		__HAL_RTC_EXTI_CLEAR_FLAG( RTC_EXTI_LINE_ALARM_EVENT );

		//
		// Restore the alarm to it's original time. This could have been a snooze alarm
		//
		ClockAlarm.AlarmTime = MasterAlarmTime;
		HAL_RTC_SetAlarm_IT( &RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD );

		if(alarmSet == 1)
		{
			PlayMusic = TRUE;
			state = 3;
		}
		else
		{
			PlayMusic = FALSE;
		}
	}


}


/*
 * Function: Display7Segment
 *
 * Description:
 *
 * Displays the current time, alarm time or time format
 *
 */

void SegmentsDisplay( void )
{
	switch (DisplayedDigit){
	case 0:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
		break;
	case 1:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
		break;
	case 3:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
		break;
	case 4:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
		break;
	case 5:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
		break;
	case 6:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
		break;
	case 7:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
		break;
	case 8:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
		break;
	case 9:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
		break;
	default:
		DisplayedDigit = 0;
		break;
	}
}


void Display7Segment(void)
{
	switch(digit_active)
	{
	case 0:
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
		digit_active++;
		DisplayedDigit = RTC_Bcd2ToByte(BcdTime[0]);
		SegmentsDisplay();
		break;
	case 1:
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
		digit_active++;
		DisplayedDigit = RTC_Bcd2ToByte(BcdTime[1]);
		SegmentsDisplay();
		break;
	case 2:
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
		digit_active++;
		DisplayedDigit = RTC_Bcd2ToByte(BcdTime[2]);
		SegmentsDisplay();
		break;
	case 3:
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
		HAL_GPIO_WritePin( GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
		digit_active++;
		DisplayedDigit = RTC_Bcd2ToByte(BcdTime[3]);
		SegmentsDisplay();
		break;
	case 4:
		//
		// Clear the display
		//
		// Digits
		//
		GPIOD->BSRR = ( GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ) << 16;
		//
		// Segments
		//
		GPIOE->BSRR = ( GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |
				GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ) << 16;
		digit_active = 0;
		break;

	default:
		digit_active = 0;
	}

}

//
// Select with digit to display the time for
//



void DisplayClockMode(void)
{
	((ClockHourFormat == CLOCK_HOUR_FORMAT_12) && (ClockTime.Hours >= 0x12)) ? HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET) : HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
	(1 == alarmSet) ? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET) : HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
}


void ConvertTo24Hour(void)
{

	if(ClockHourFormat == CLOCK_HOUR_FORMAT_12)
	{
		ClockHourFormat = CLOCK_HOUR_FORMAT_24;
	}
	else
	{
		ClockHourFormat = CLOCK_HOUR_FORMAT_12;
	}

}

/*
 * Function: SetTime
 *
 * Description:
 *
 * Advance either the time hours or minutes field. Validate the new time and then update the clock
 *
 */

void SetTime(void)
{
	if(HOURS_BUTTON_PUSHED)
	{
		ClockTime.Hours += 0x01;
	}
	if(MINUTES_BUTTON_PUSHED)
	{
		ClockTime.Minutes += 0x01;

	}
	// lines above won't work as it modifies the shadow register, need to modify master.
	(ClockHourFormat == CLOCK_HOUR_FORMAT_12) ? timeHourCheck() : timeHourCheck24();
	timeMinuteCheck();

	__HAL_RTC_WRITEPROTECTION_DISABLE( &RealTimeClock );
	HAL_RTC_SetTime( &RealTimeClock, &ClockTime, RTC_FORMAT_BCD );	// check assert_param() that failed
	__HAL_RTC_WRITEPROTECTION_ENABLE( &RealTimeClock );
}

/*
 * Function: SetAlarm
 *
 * Description:
 *
 * Advance either the alarm hours or minutes field. Validate the new alarm time and then set the alarm
 *
 */

void SetAlarm(void)
{
	if(HOURS_BUTTON_PUSHED )
	{
		ClockAlarm.AlarmTime.Hours += 0x01;
	}
	if(MINUTES_BUTTON_PUSHED )
	{
		ClockAlarm.AlarmTime.Minutes += 0x01;
	}

	(ClockHourFormat == CLOCK_HOUR_FORMAT_12) ? alarmHourCheck() : alarmHourCheck24();
	alarmMinuteCheck();

	MasterAlarmTime = ClockAlarm.AlarmTime;

	/*
	 * __HAL_RTC_ALARMA_DISABLE( &RealTimeClock );
	 * __HAL_RTC_ALARM_CLEAR_FLAG(&RealTimeClock, RTC_FLAG_ALRAF);
	 * */
	__HAL_RTC_WRITEPROTECTION_DISABLE( &RealTimeClock );
	HAL_RTC_SetAlarm( &RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD );	// check assert_param() that failed
	HAL_RTC_SetAlarm_IT(&RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD);
	__HAL_RTC_WRITEPROTECTION_ENABLE( &RealTimeClock );
}



/*
 * Function: Snooze
 *
 * Description:
 *
 * Add 2 Minutes to the current time and validate. Update the alarm and enable.
 *
 */

void Snooze(void)
{
	ClockAlarm.AlarmTime.Minutes = ClockTime.Minutes + SNOOZE_TIME;
	(ClockHourFormat == CLOCK_HOUR_FORMAT_12) ? alarmHourCheck() : alarmHourCheck24();
	alarmMinuteCheck();
	__HAL_RTC_WRITEPROTECTION_DISABLE( &RealTimeClock );
	HAL_RTC_SetAlarm( &RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD );	// check assert_param() that failed
	HAL_RTC_SetAlarm_IT( &RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD );
	__HAL_RTC_WRITEPROTECTION_ENABLE( &RealTimeClock );
}


/*
 * Function: GetCurrentTime
 *
 * Description:
 *
 * Return either the alarm time or current time in binary coded decimal format store in the array BcdTime.
 *
 */

void GetCurrentTime(void)
{
	if (2 == state)
	{
		HAL_RTC_GetAlarm(&RealTimeClock, &ClockAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
		HAL_RTC_GetDate(&RealTimeClock, &ClockDate, RTC_FORMAT_BIN);

		BcdTime[1] = ClockAlarm.AlarmTime.Hours & 0xf;
		BcdTime[0] = (ClockAlarm.AlarmTime.Hours & 0xf0) >> 4;
		BcdTime[3] = ClockAlarm.AlarmTime.Minutes & 0xf;
		BcdTime[2] = (ClockAlarm.AlarmTime.Minutes & 0xf0) >> 4;
	}
	else
	{
		HAL_RTC_GetTime(&RealTimeClock, &ClockTime, RTC_FORMAT_BCD);
		HAL_RTC_GetDate(&RealTimeClock, &ClockDate, RTC_FORMAT_BIN);
		if((ClockHourFormat == CLOCK_HOUR_FORMAT_12) && ClockTime.Hours >= 0x13 )
		{
			BcdTime[1] = (ClockTime.Hours & 0xf) - 2;
			BcdTime[0] = ((ClockTime.Hours & 0xf0) >> 4) - 1;
		}
		else
		{
			BcdTime[1] = ClockTime.Hours & 0xf;
			BcdTime[0] = (ClockTime.Hours & 0xf0) >> 4;
		}
		BcdTime[3] = ClockTime.Minutes & 0xf;
		BcdTime[2] = (ClockTime.Minutes & 0xf0) >> 4;
	}
}

/*


 * Function: CheckButtons
 *
 * Description:
 *
 * Check the current state of all the buttons and apply debounce algorithm. Return TRUE with the ButtonPushed
 * variable set indicating the button or buttons pushed if button press is detected.
 *
 */

uint16_t ButtonDebounce (uint16_t GPIO_Pin)
{

	int pos, debounce;

	switch(GPIO_Pin)
	{
	case GPIO_PIN_4:
		pos = 0;
		break;
	case GPIO_PIN_5:
		pos = 1;
		break;
	case GPIO_PIN_8:
		pos = 2;
		break;
	case GPIO_PIN_9:
		pos = 3;
		break;
	case GPIO_PIN_11:
		pos = 4;
		break;
	}


	if(!HAL_GPIO_ReadPin(GPIOC, GPIO_Pin))
	{
		// button pressed state
		button_on_likelihood[pos]++;
		button_off_likelihood[pos] = 0;
		if(button_on_likelihood[pos] > 20)
		{
			if((ButtonsPushed & GPIO_Pin) == 0x0)
			{
				ButtonsPushed |= GPIO_Pin;
				was_pressed &= ~GPIO_Pin;
			}
			//button_on_likelihood[pos] = 0; // not sure what difference this makes
		}
	}
	else
	{

		button_off_likelihood[pos]++;

		button_on_likelihood[pos] = 0;

		if (button_off_likelihood[pos] > 20)
		{
			ButtonsPushed &= ~GPIO_Pin;
			//was_pressed &= ~GPIO_Pin;
			button_off_likelihood[pos] = 0;
		}
	}

	return ButtonsPushed;
}

uint16_t CheckButtons( void )
{
	//ButtonsPushed = (uint16_t)(GPIOC->IDR & (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_11) );
	/*ButtonsPushed = ((ButtonDebounce(GPIO_PIN_4) /*& ~was_pressed  )
		| (ButtonDebounce(GPIO_PIN_8) )
			| (ButtonDebounce(GPIO_PIN_11) )
			| (ButtonDebounce(GPIO_PIN_9)  )
			| (ButtonDebounce(GPIO_PIN_5) ));*/
	ButtonDebounce(GPIO_PIN_4); /*& ~was_pressed*/
	ButtonDebounce(GPIO_PIN_8);
	ButtonDebounce(GPIO_PIN_11);
	ButtonDebounce(GPIO_PIN_9);
	ButtonDebounce(GPIO_PIN_5);
	return ButtonsPushed;
}


/*
 * Function: ProcessButtons
 *
 * Description:
 *
 * Test for which button or buttons has been pressed and do the appropriate operation.
 *
 */

void ProcessButtons( void )
{
	switch (state)
	{
	// default state
	case 0:
		if(TIME_BUTTON_PUSHED)
		{
			// change state to set time state
			state = 1;
		}
		else if(ALARM_BUTTON_PUSHED)
		{
			// change state to set alarm state
			state = 2;
		}
		if(MODE_BUTTON_PUSHED && (was_pressed & MODE_BUTTON) == 0x0)
		{
			// call 12/24 function
			ConvertTo24Hour();
			was_pressed |= MODE_BUTTON;
		}
		if(ON_OFF_BUTTON_PUSHED && (was_pressed & ON_OFF_BUTTON) == 0x0)
		{
			// disable or enable alarm
			if(1 == alarmSet)
			{
				alarmSet = 0;
				ClockAlarm.AlarmTime = MasterAlarmTime;
				__HAL_RTC_WRITEPROTECTION_DISABLE( &RealTimeClock );
				HAL_RTC_SetAlarm( &RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD );	// check assert_param() that failed
				HAL_RTC_SetAlarm_IT(&RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD);
				__HAL_RTC_WRITEPROTECTION_ENABLE( &RealTimeClock );
			}
			else
			{
				alarmSet = 1;
			}
			was_pressed |= ON_OFF_BUTTON;
		}
		break;

		// set time state
	case 1:
		if(!TIME_BUTTON_PUSHED)
		{
			// return to default state
			state = 0;
		}
		if(MINUTES_BUTTON_PUSHED && (was_pressed & MINUTES_BUTTON ) == 0x0)
		{
			SetTime();
			was_pressed |= MINUTES_BUTTON;
		}
		if(HOURS_BUTTON_PUSHED && (was_pressed & HOURS_BUTTON ) == 0x0)
		{
			SetTime();
			was_pressed |= HOURS_BUTTON;
		}
		break;

		// set alarm state
	case 2:
		if(!ALARM_BUTTON_PUSHED)
		{
			state = 0;
		}
		if(MINUTES_BUTTON_PUSHED && (was_pressed & MINUTES_BUTTON ) == 0x0)
		{
			SetAlarm();
			was_pressed |= MINUTES_BUTTON;
		}
		if(HOURS_BUTTON_PUSHED && (was_pressed & HOURS_BUTTON ) == 0x0)
		{
			SetAlarm();
			was_pressed |= HOURS_BUTTON;
		}
		break;

		// alarm is active state
	case 3:
		if(ON_OFF_BUTTON_PUSHED)
		{
			PlayMusic = FALSE;
			alarmSet = 0;
			state = 0;
			ClockAlarm.AlarmTime = MasterAlarmTime;
			__HAL_RTC_WRITEPROTECTION_DISABLE( &RealTimeClock );
			HAL_RTC_SetAlarm( &RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD );	// check assert_param() that failed
			HAL_RTC_SetAlarm_IT(&RealTimeClock, &ClockAlarm, RTC_FORMAT_BCD);
			__HAL_RTC_WRITEPROTECTION_ENABLE( &RealTimeClock );
		}
		else if(SNOOZE_BUTTON_PUSHED)
		{
			Snooze();
			PlayMusic = FALSE;
			state = 0;
		}
		break;
	}
}

//static void Error_Handler(void)
//{

//while(1)
//	{
//	}
//}




#pragma GCC diagnostic pop

// ----------------------------------------------------------------------------


